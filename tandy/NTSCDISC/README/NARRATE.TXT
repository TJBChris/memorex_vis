NTSC

Programming for VIS means dealing not only with a new machine,
but with a type of display that many of us are not yet very
familiar with ...the color TV.  The video system used by color
TV's in America is called NTSC.  This is a short tutorial on how
to have your apps look their best on NTSC. These rules are also
applicable to PAL-I, the television standard in Europe.

200 vs 400 Lines

The first and most important decision in regard to your VIS
application, is which video mode or modes it will use.  Keep in
mind the following rule, "Always prefer 200 line modes to 400
line modes!"  If you think you might need a 400 line mode, be
sure and re-think before proceeding.  Why such a stern warning?
It'll soon become apparent as we display the problems certain
imaages can have in a 400 line mode.

Author and Test Images On A Variety of TVs

After selecting the video mode you'll need, the next most
important thing you can do to improve the quality of your video
is to both author and test your images on a TV.  Part of your
testing should be in a worst case environment consisting of an
inexpensive consumer television with the video signal coming
from the RF output on the back of the VIS.  Both the composite
and S-Video outputs provide a much better signal than the RF
output and do not reflect a worst case image. Many problems
cannot be detected on VGA or high quality TV.

As shown in this example, single pixel width horizontal and
near-horizontal lines show dramatic flickering in 400 line
mode.This is due to the interlaced nature of NTSC.  Two-pixel
width lines have less flickering, but still are not as stable as
200 line modes on VIS.  This flickering is normally most
apparent in man-made images--natural images typically have more
gradual luminance and color changes and less flickering as
flickering is due to drastic differences between the brightness
of pixels on adjacent lines.  The more dramatic the difference,
the more dramatic the flickering.  The ear shown here flickers
badly because it's colors are dithered--where a pure red pixel
occurs on one line the adjacent line has a pure white pixel. The
color that was desired was "Pink", the color that was achieved
has no name.

Before you laugh, let me tell you that we have seen many images
as bad or worse than this.  Many of the images have been from
established software vendors who have equipment and talent, but
they failed to look at their images in the environment that they
were developing for.  Please don't make the same mistake. These
problems cannot be easily detected using VGA or high quality
monitors. A real consumer-grade TV is needed.

Piclab

Here is the first version of the image that was displayed
earlier.  Note the distinct flicker around the top edge of the
machine.  The flicker was removed by using a program called
Piclab which is available on Tandy's bulletin board system and
in the software subdirectory of this CD.  The image was rescaled
from its original resolution of 640 x 400 to 640 x 200 and then
rescaled back to 640 x 400.  This removed sharp color
transitions between lines.  Here's another look at the results. 
This simple technique is all that is necessary for many images
and you still have twice the resolution that you would have in a
320 x 200 image.

Oversaturation

Colors should not be over saturated.  Bright colors will tend to
"bloom" past the pixels that are directly affected onto adjacent
pixels.  The solution to this is to reduce the brightness of the
problem areas in an image.  If you are having a problem with
colors smearing over onto adjacent pixels then you might try
reducing the intensity of your colors to 70% of full intensity. 
That means that if you are now using a range from 0-255 in your
images, that you would reduce it to 0-179.  Please note: This is
not a general case solution!  This will cause your images to be
darker and only you can determine if your images are reduced too
much in quality by that 

Let's use this image of the flag to demonstrate how you can use
Piclab to help you identify problem images.  We can load the
image into Piclab whether it is 256 color or 24 bit.  After
loading the image we can get Piclab to generate a greyscale
version of the image.  The greyscale image simply reflects the
brightness of each pixel on the screen.  As a last step we
darken the image by 179.  The resulting image will show any
areas that are brighter than 70% of full intensity and allow you
to make decisions about their severity and whether the image
needs to be toned down.

As we saw earlier, even natural images can display significant
flickering.  This image of scattered pine needles is a more
difficult image that displays not only flicker but chroma crawl
from oversaturated colors.  Here's a version of the same image,
improved as the result of reducing the vertical resolution by
scaling down and back up--the same method we used on the image
of the back of the machine.  Clearly there is still a great deal
of chroma crawl.  The next and last image of the trio is the
output of the program Filter24 that Microsoft supplies with the
Haiku SDK.  The image has lost detail compared to the original
but no longer shows significant crawl or flicker.  Only you can
decide how much quality loss you can live with to alleviate NTSC
problems and remember only by looking at your images in a worst
case environment can you see what your problems are.

TV Quality

The last problem that we will discuss is not a function of NTSC
or of the VIS machine but of the quality of the TV used.  Many
TV's demonstrate an effect called pincushioning.  This is seen
as a shortening or lengthening of pixel lines due to brightness
changes over the course of the lines.  As a result the right
side of the image seems to bend inward or outward and may even
warp back and forth if the image is changing.  This animation
demonstrates how pincushioning can appear on a TV.

The animation grossly exaggerates the effects of pincushioning
but will give you an idea of what to look for.  If you have
pincushioning problems in your video then you may want to
consider using the BIOS to change the border color for your
application.  Using the animation as an example, we can see that
if a black border had been set before running the animation,
that it would have been imposible to see the effects of
pincushioning.  The only way to actually reduce the effects of
pincushioning is to flatten the brightness range of your images
in the manner that was discussed previously with respect to over
saturation.




